<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl">
<binding id="action">
<content xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul">
  <xul:image anonid="remove" tooltiptext="Remove this action" />
  <xul:menulist style="display:none" tooltiptext="Firefox session number">
    <xul:menupopup anonid="sessions"/>
  </xul:menulist>
  <xul:vbox flex="1">
    <xul:box anonid="action" />
    <xul:label anonid="error" hidden="true" />
  </xul:vbox>
  <xul:vbox align="center">
    <xul:image anonid="result" hidden="true" />
    <xul:label anonid="time" />
  </xul:vbox>
  <xul:image anonid="execute" tooltiptext="Execute this action, Now!" />
</content>
<implementation>
<constructor>
  this.type=this.getAttribute("type");
  
  this.sessions = document.getAnonymousElementByAttribute(this, "anonid", "sessions");
  this.action = document.getAnonymousElementByAttribute(this, "anonid", "action");
  this.executeIcon = document.getAnonymousElementByAttribute(this, "anonid", "execute");
  this.result = document.getAnonymousElementByAttribute(this, "anonid", "result");
  this.error = document.getAnonymousElementByAttribute(this, "anonid", "error");
  this.time = document.getAnonymousElementByAttribute(this, "anonid", "time");
  
  this.action.setAttribute("style","-moz-binding:url('actions/"+this.type+".xml#"+this.type+"')");
  if (!this.type.match(/firefox-session/)) {
    this.sessions.parentNode.style.display="";
    firefoxSessions.addObserver(this);
    if (firefoxSessions.hasOnlyOneSession()) {
      this.selectSession(firefoxSessions.getFirstSession());
    }
  } else {
    this.sessionId = firefoxSessions.getNextId();
    this.action.setAttribute("session-id",sessionId);
    //this.sessions.parentNode.style.backgroundColor=firefoxSessions.getColorFor(this.sessionId);
  }
  
</constructor>
<destructor>
  
</destructor>

<method name="observe">
<parameter name="topic" />
<parameter name="sessionId" />
<body><![CDATA[
  if (topic==firefoxSessions.EVENT_ADD) {
    
    var menuitem=document.createElement("menuitem");
    menuitem.setAttribute("label","#"+sessionId);
    menuitem.sessionId=sessionId;
    menuitem.style.backgroundColor=firefoxSessions.getColorFor(sessionId);
    this.sessions.appendChild(menuitem);
    
  } else if (topic==firefoxSessions.EVENT_REMOVE) {
    
    for(var i=0; i<this.sessions.childNodes.length; i++) {
      var item=this.sessions.childNodes[i];
      if (item.label==sessionId) {
        if (item.selected)
          this.sessions.parentNode.selectedIndex=-1;
        item.parentNode.removeChild(item);
      }
    }
    
  }
]]></body>
</method>

<method name="restore">
<parameter name="action" />
<body><![CDATA[
  var id=action.sessionId;
  dump("restore action : "+id+"\n");
  if (id) {
    for(var i=0; i<this.sessions.childNodes.length; i++) {
      var item=this.sessions.childNodes[i];
      dump(item.sessionId+"=="+id+"\n");
      if (item.sessionId==id) {
        this.sessions.parentNode.selectedItem=item;
        break;
      }
    }
  }
  return this.action.restore(action.content);
]]></body>
</method>
<method name="getActionObject">
<body><![CDATA[
  return {
    sessionId : this.action.getAttribute("session-id"),
    type : this.type,
    content : this.action.getActionObject()
  };
]]></body>
</method>

<method name="reset">
<body><![CDATA[
  this.executeIcon.className="";
  this.result.hidden=true;
  this.error.hidden=true;
  this.time.value="";
]]></body>
</method>

<method name="execute">
<parameter name="callback" />
<body><![CDATA[
    this.executeIcon.className="pending";
    this.result.hidden=true;
    this.error.hidden=true;
    
    var _self=this;
    try {
    var start=new Date().getTime();
    Actions.execute(this.getActionObject(), 
        function(success, result) {
          _self.result.hidden=false;
          _self.result.className=success?"success":"fail";
          _self.executeIcon.className="";
          _self.time.value=(new Date().getTime()-start)+"ms";
          if (!success) {
            _self.error.hidden = false;
            _self.error.value = result.msg;
          }
          _self.action.executed(success,result);
          if (callback)
            callback(success,result);
        });
    } catch(e) {
      this.executeIcon.className="fail";
      _self.error.hidden = false;
      _self.error.value = "Internal error : "+e.toString();
      _self.time.value=(new Date().getTime()-start)+"ms";
      if (callback)
        callback(false,{msg:e.toString()});
    }
    
]]></body>
</method>

<method name="selectSession">
<parameter name="id" />
<body><![CDATA[
  this.action.setAttribute("session-id",id);
  for(var i=0; i<this.sessions.childNodes.length; i++) {
    var item=this.sessions.childNodes[i];
    if (item.sessionId==id) {
      this.sessions.parentNode.selectedItem=item;
      break;
    }
  }
  
  this.sessions.parentNode.style.backgroundColor=firefoxSessions.getColorFor(id);
]]></body>
</method>

</implementation>
<handlers>
<handler event="click">
  if (event.originalTarget.getAttribute("anonid")=="remove") {
    
    if (this.sessionId)
      firefoxSessions.removeSession(this.sessionId);
    else
      firefoxSessions.removeObserver(this);
    this.parentNode.parentNode.removeChild(this.parentNode);
    
  } else if (event.originalTarget.getAttribute("anonid")=="execute") {
    
    this.execute();
    
  }
</handler>
<handler event="select">
  if (event.originalTarget != this.sessions.parentNode) return;
  var id = this.sessions.parentNode.selectedItem.sessionId;
  this.selectSession(id);
</handler>
</handlers>
</binding>
</bindings>
